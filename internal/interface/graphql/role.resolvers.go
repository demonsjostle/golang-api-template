package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"cpru-api/graph/model"
	"cpru-api/internal/domain/role"
	"strconv"
)

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input model.CreateRoleInput) (*model.Role, error) {
	role := &role.Role{Name: input.Name}
	created, err := r.RoleService.Create(ctx, role)
	if err != nil {
		return nil, err
	}
	return &model.Role{
		ID:   strconv.Itoa(created.ID),
		Name: created.Name,
	}, nil
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id string, input model.UpdateRoleInput) (*model.Role, error) {
	roleID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	existing, err := r.RoleService.GetByID(ctx, roleID)
	if err != nil {
		return nil, err
	}

	if input.Name != nil {
		existing.Name = *input.Name
	}

	updated, err := r.RoleService.Update(ctx, existing)
	if err != nil {
		return nil, err
	}

	return &model.Role{
		ID:   strconv.Itoa(updated.ID),
		Name: updated.Name,
	}, nil
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id string) (bool, error) {
	roleID, err := strconv.Atoi(id)
	if err != nil {
		return false, err
	}

	if err := r.RoleService.Delete(ctx, roleID); err != nil {
		return false, err
	}

	return true, nil
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context) ([]*model.Role, error) {
	list, err := r.RoleService.GetAll(ctx)
	if err != nil {
		return nil, err
	}

	var roles []*model.Role
	for _, r := range list {
		roles = append(roles, &model.Role{
			ID:   strconv.Itoa(r.ID),
			Name: r.Name,
		})
	}
	return roles, nil
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, id string) (*model.Role, error) {
	roleID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	rData, err := r.RoleService.GetByID(ctx, roleID)
	if err != nil {
		return nil, err
	}

	return &model.Role{
		ID:   strconv.Itoa(rData.ID),
		Name: rData.Name,
	}, nil
}
