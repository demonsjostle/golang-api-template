package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"cpru-api/graph/model"
	"cpru-api/internal/domain/user"
	"strconv"
)

// CreateUser resolver สำหรับ mutation createUser
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	u := &user.User{
		Name:         input.Name,
		Surname:      input.Surname,
		Username:     input.Username,
		Email:        input.Email,
		Phone:        input.Phone,
		Password:     input.Password,
		DepartmentID: input.DepartmentID,
	}

	createdUser, err := r.UserService.Create(ctx, u)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:           strconv.Itoa(createdUser.ID),
		Name:         createdUser.Name,
		Surname:      createdUser.Surname,
		Username:     createdUser.Username,
		Email:        createdUser.Email,
		Phone:        createdUser.Phone,
		DepartmentID: createdUser.DepartmentID,
	}, nil
}

// UpdateUser resolver สำหรับ mutation updateUser
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	userID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	// ดึงข้อมูล user ปัจจุบันมา
	u, err := r.UserService.GetByID(ctx, userID)
	if err != nil {
		return nil, err
	}

	// อัพเดตข้อมูลจาก input (เช็ค field ว่ามีค่าหรือไม่)
	if input.Name != nil {
		u.Name = *input.Name
	}
	if input.Surname != nil {
		u.Surname = *input.Surname
	}
	if input.Username != nil {
		u.Username = *input.Username
	}
	if input.Email != nil {
		u.Email = *input.Email
	}
	if input.Phone != nil {
		u.Phone = input.Phone
	}
	if input.Password != nil {
		u.Password = *input.Password
	}
	if input.DepartmentID != nil {
		u.DepartmentID = input.DepartmentID
	}

	updatedUser, err := r.UserService.Update(ctx, u)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:           strconv.Itoa(updatedUser.ID),
		Name:         updatedUser.Name,
		Surname:      updatedUser.Surname,
		Username:     updatedUser.Username,
		Email:        updatedUser.Email,
		Phone:        updatedUser.Phone,
		DepartmentID: updatedUser.DepartmentID,
	}, nil
}

// DeleteUser resolver สำหรับ mutation deleteUser
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	userID, err := strconv.Atoi(id)
	if err != nil {
		return false, err
	}

	err = r.UserService.Delete(ctx, userID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// Users resolver สำหรับ query users
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.UserService.GetAll(ctx)
	if err != nil {
		return nil, err
	}

	var result []*model.User
	for _, u := range users {
		result = append(result, &model.User{
			ID:           strconv.Itoa(u.ID),
			Name:         u.Name,
			Surname:      u.Surname,
			Username:     u.Username,
			Email:        u.Email,
			Phone:        u.Phone,
			DepartmentID: u.DepartmentID,
		})
	}
	return result, nil
}

// User resolver สำหรับ query user by id
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	userID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	u, err := r.UserService.GetByID(ctx, userID)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:           strconv.Itoa(u.ID),
		Name:         u.Name,
		Surname:      u.Surname,
		Username:     u.Username,
		Email:        u.Email,
		Phone:        u.Phone,
		DepartmentID: u.DepartmentID,
	}, nil
}
