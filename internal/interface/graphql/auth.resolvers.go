package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"cpru-api/graph/model"
	"cpru-api/internal/application/auth"
	"cpru-api/internal/interface/http/middleware"
	"strconv"
)

// Register resolver
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthPayload, error) {
	regIn := auth.RegisterInput{
		Name:         input.Name,
		Surname:      input.Surname,
		Username:     input.Username,
		Email:        input.Email,
		Phone:        input.Phone,
		Password:     input.Password,
		DepartmentID: input.DepartmentID,
	}
	createdUser, err := r.AuthService.Register(ctx, regIn)
	if err != nil {
		return nil, err
	}
	token, _, err := r.AuthService.Login(ctx, auth.LoginInput{
		Username: input.Username,
		Password: input.Password,
	})
	if err != nil {
		return nil, err
	}
	return &model.AuthPayload{
		Token: token,
		User: &model.User{
			ID:           strconv.Itoa(createdUser.ID),
			Name:         createdUser.Name,
			Surname:      createdUser.Surname,
			Username:     createdUser.Username,
			Email:        createdUser.Email,
			Phone:        createdUser.Phone,
			DepartmentID: createdUser.DepartmentID,
		},
	}, nil
}

// Login resolver
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	token, u, err := r.AuthService.Login(ctx, auth.LoginInput{
		Username: input.Username,
		Password: input.Password,
	})
	if err != nil {
		return nil, err
	}
	return &model.AuthPayload{
		Token: token,
		User: &model.User{
			ID:           strconv.Itoa(u.ID),
			Name:         u.Name,
			Surname:      u.Surname,
			Username:     u.Username,
			Email:        u.Email,
			Phone:        u.Phone,
			DepartmentID: u.DepartmentID,
		},
	}, nil
}

// Me resolver (Query me)
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	raw := ctx.Value(middleware.KeyUserID)
	if raw == nil {
		return nil, nil // ยังไม่ได้ล็อกอิน
	}
	userID, ok := raw.(int)
	if !ok {
		return nil, nil
	}
	u, err := r.UserService.GetByID(ctx, userID)
	if err != nil {
		return nil, err
	}
	return &model.User{
		ID:           strconv.Itoa(u.ID),
		Name:         u.Name,
		Surname:      u.Surname,
		Username:     u.Username,
		Email:        u.Email,
		Phone:        u.Phone,
		DepartmentID: u.DepartmentID,
	}, nil
}
