package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"cpru-api/graph/model"
	"strconv"
)

// AssignRoleToUser is the resolver for the assignRoleToUser field.
func (r *mutationResolver) AssignRoleToUser(ctx context.Context, userID int, roleID int) (*model.UserRole, error) {
	ur, err := r.UserRoleService.Assign(ctx, userID, roleID)
	if err != nil {
		return nil, err
	}
	return &model.UserRole{
		ID:     strconv.Itoa(ur.ID),
		UserID: ur.UserID,
		RoleID: ur.RoleID,
	}, nil
}

// RemoveRoleFromUser is the resolver for the removeRoleFromUser field.
func (r *mutationResolver) RemoveRoleFromUser(ctx context.Context, userID int, roleID int) (bool, error) {
	err := r.UserRoleService.Remove(ctx, userID, roleID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UserRolesByUserID is the resolver for the userRolesByUserID field.
func (r *queryResolver) UserRolesByUserID(ctx context.Context, userID int) ([]*model.UserRole, error) {
	urs, err := r.UserRoleService.GetByUserID(ctx, userID)
	if err != nil {
		return nil, err
	}

	var result []*model.UserRole
	for _, ur := range urs {
		result = append(result, &model.UserRole{
			ID:     strconv.Itoa(ur.ID),
			UserID: ur.UserID,
			RoleID: ur.RoleID,
		})
	}
	return result, nil
}

// UserRolesByRoleID is the resolver for the userRolesByRoleID field.
func (r *queryResolver) UserRolesByRoleID(ctx context.Context, roleID int) ([]*model.UserRole, error) {
	urs, err := r.UserRoleService.GetByRoleID(ctx, roleID)
	if err != nil {
		return nil, err
	}

	var result []*model.UserRole
	for _, ur := range urs {
		result = append(result, &model.UserRole{
			ID:     strconv.Itoa(ur.ID),
			UserID: ur.UserID,
			RoleID: ur.RoleID,
		})
	}
	return result, nil
}
