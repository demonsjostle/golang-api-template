package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"cpru-api/graph/model"
	"cpru-api/internal/domain/permission"
	"strconv"
)

// CreatePermission resolver
func (r *mutationResolver) CreatePermission(ctx context.Context, input model.CreatePermissionInput) (*model.Permission, error) {
	p := &permission.Permission{
		Code:        input.Code,
		Description: input.Description,
	}

	created, err := r.PermissionService.Create(ctx, p)
	if err != nil {
		return nil, err
	}

	return &model.Permission{
		ID:          strconv.Itoa(created.ID),
		Code:        created.Code,
		Description: created.Description,
	}, nil
}

// UpdatePermission resolver
func (r *mutationResolver) UpdatePermission(ctx context.Context, id string, input model.UpdatePermissionInput) (*model.Permission, error) {
	permID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	existing, err := r.PermissionService.GetByID(ctx, permID)
	if err != nil {
		return nil, err
	}

	if input.Code != nil {
		existing.Code = *input.Code
	}
	if input.Description != nil {
		existing.Description = input.Description
	}

	updated, err := r.PermissionService.Update(ctx, existing)
	if err != nil {
		return nil, err
	}

	return &model.Permission{
		ID:          strconv.Itoa(updated.ID),
		Code:        updated.Code,
		Description: updated.Description,
	}, nil
}

// DeletePermission resolver
func (r *mutationResolver) DeletePermission(ctx context.Context, id string) (bool, error) {
	permID, err := strconv.Atoi(id)
	if err != nil {
		return false, err
	}

	if err := r.PermissionService.Delete(ctx, permID); err != nil {
		return false, err
	}
	return true, nil
}

// Permissions resolver
func (r *queryResolver) Permissions(ctx context.Context) ([]*model.Permission, error) {
	perms, err := r.PermissionService.GetAll(ctx)
	if err != nil {
		return nil, err
	}

	var result []*model.Permission
	for _, p := range perms {
		result = append(result, &model.Permission{
			ID:          strconv.Itoa(p.ID),
			Code:        p.Code,
			Description: p.Description,
		})
	}
	return result, nil
}

// Permission resolver
func (r *queryResolver) Permission(ctx context.Context, id string) (*model.Permission, error) {
	permID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	p, err := r.PermissionService.GetByID(ctx, permID)
	if err != nil {
		return nil, err
	}

	return &model.Permission{
		ID:          strconv.Itoa(p.ID),
		Code:        p.Code,
		Description: p.Description,
	}, nil
}
