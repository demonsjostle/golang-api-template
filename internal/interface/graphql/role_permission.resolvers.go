package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"cpru-api/graph/model"
	"strconv"
)

// AssignPermissionToRole เป็น resolver สำหรับ mutation assignPermissionToRole
func (r *mutationResolver) AssignPermissionToRole(ctx context.Context, roleID int, permissionID int) (*model.RolePermission, error) {
	rp, err := r.RolePermissionService.Assign(ctx, roleID, permissionID)
	if err != nil {
		return nil, err
	}

	return &model.RolePermission{
		ID:           strconv.Itoa(rp.ID),
		RoleID:       rp.RoleID,
		PermissionID: rp.PermissionID,
	}, nil
}

// RemovePermissionFromRole เป็น resolver สำหรับ mutation removePermissionFromRole
func (r *mutationResolver) RemovePermissionFromRole(ctx context.Context, roleID int, permissionID int) (bool, error) {
	err := r.RolePermissionService.Remove(ctx, roleID, permissionID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// RolePermissionsByRoleID เป็น resolver สำหรับ query rolePermissionsByRoleID
func (r *queryResolver) RolePermissionsByRoleID(ctx context.Context, roleID int) ([]*model.RolePermission, error) {
	results, err := r.RolePermissionService.GetByRoleID(ctx, roleID)
	if err != nil {
		return nil, err
	}

	var list []*model.RolePermission
	for _, rp := range results {
		list = append(list, &model.RolePermission{
			ID:           strconv.Itoa(rp.ID),
			RoleID:       rp.RoleID,
			PermissionID: rp.PermissionID,
		})
	}
	return list, nil
}

// RolePermissionsByPermissionID เป็น resolver สำหรับ query rolePermissionsByPermissionID
func (r *queryResolver) RolePermissionsByPermissionID(ctx context.Context, permissionID int) ([]*model.RolePermission, error) {
	results, err := r.RolePermissionService.GetByPermissionID(ctx, permissionID)
	if err != nil {
		return nil, err
	}

	var list []*model.RolePermission
	for _, rp := range results {
		list = append(list, &model.RolePermission{
			ID:           strconv.Itoa(rp.ID),
			RoleID:       rp.RoleID,
			PermissionID: rp.PermissionID,
		})
	}
	return list, nil
}
