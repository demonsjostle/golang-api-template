// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cpru-api/ent/permission"
	"cpru-api/ent/user"
	"cpru-api/ent/userpermission"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPermissionCreate is the builder for creating a UserPermission entity.
type UserPermissionCreate struct {
	config
	mutation *UserPermissionMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (upc *UserPermissionCreate) SetUserID(i int) *UserPermissionCreate {
	upc.mutation.SetUserID(i)
	return upc
}

// SetPermissionID sets the "permission_id" field.
func (upc *UserPermissionCreate) SetPermissionID(i int) *UserPermissionCreate {
	upc.mutation.SetPermissionID(i)
	return upc
}

// SetUser sets the "user" edge to the User entity.
func (upc *UserPermissionCreate) SetUser(u *User) *UserPermissionCreate {
	return upc.SetUserID(u.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (upc *UserPermissionCreate) SetPermission(p *Permission) *UserPermissionCreate {
	return upc.SetPermissionID(p.ID)
}

// Mutation returns the UserPermissionMutation object of the builder.
func (upc *UserPermissionCreate) Mutation() *UserPermissionMutation {
	return upc.mutation
}

// Save creates the UserPermission in the database.
func (upc *UserPermissionCreate) Save(ctx context.Context) (*UserPermission, error) {
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserPermissionCreate) SaveX(ctx context.Context) *UserPermission {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserPermissionCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserPermissionCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserPermissionCreate) check() error {
	if _, ok := upc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserPermission.user_id"`)}
	}
	if _, ok := upc.mutation.PermissionID(); !ok {
		return &ValidationError{Name: "permission_id", err: errors.New(`ent: missing required field "UserPermission.permission_id"`)}
	}
	if len(upc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserPermission.user"`)}
	}
	if len(upc.mutation.PermissionIDs()) == 0 {
		return &ValidationError{Name: "permission", err: errors.New(`ent: missing required edge "UserPermission.permission"`)}
	}
	return nil
}

func (upc *UserPermissionCreate) sqlSave(ctx context.Context) (*UserPermission, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UserPermissionCreate) createSpec() (*UserPermission, *sqlgraph.CreateSpec) {
	var (
		_node = &UserPermission{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userpermission.Table, sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeInt))
	)
	if nodes := upc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.UserTable,
			Columns: []string{userpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := upc.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.PermissionTable,
			Columns: []string{userpermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PermissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserPermissionCreateBulk is the builder for creating many UserPermission entities in bulk.
type UserPermissionCreateBulk struct {
	config
	err      error
	builders []*UserPermissionCreate
}

// Save creates the UserPermission entities in the database.
func (upcb *UserPermissionCreateBulk) Save(ctx context.Context) ([]*UserPermission, error) {
	if upcb.err != nil {
		return nil, upcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserPermission, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserPermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserPermissionCreateBulk) SaveX(ctx context.Context) []*UserPermission {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserPermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserPermissionCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}
